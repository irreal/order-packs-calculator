package pages

import (
	"fmt"
	"github.com/irreal/order-packs/models"
	"github.com/irreal/order-packs/web"
)

templ OrderPage(orders []*models.Order, packs models.Packs, maxCount int32, success bool) {
	@web.BaseLayout(orderPage(orders, packs, maxCount, success))
}

templ orderPage(orders []*models.Order, packs models.Packs, maxCount int32, success bool) {
	<!-- Header Section -->
	<div class="bg-gradient-to-r from-red-500 to-rose-500 text-white py-8">
		<div class="container mx-auto px-4 text-center">
			<div class="text-5xl mb-3 animate-bounce">🎈</div>
			<h1 class="text-3xl font-bold mb-2">Order Your Red Balloons!</h1>
			<p class="text-base opacity-90 mb-3">Because life's too short for balloon-less moments</p>
			<div>
				<a href="/admin" class="btn btn-outline btn-md border-white text-white hover:bg-white hover:text-red-600 hover:shadow-lg transform hover:scale-105 transition-all">
					Are you our web admin? Click here to adjust pack sizes
				</a>
			</div>
		</div>
	</div>
	<!-- Success Message -->
	if success {
		<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mx-4 my-4" role="alert">
			<div class="container mx-auto px-4">
				<div class="flex items-center justify-center">
					<span class="text-2xl mr-3">🎉</span>
					<div>
						<strong class="font-bold">Success!</strong>
						<span class="block sm:inline"> Your red balloon order has been placed successfully! 🎈</span>
					</div>
				</div>
			</div>
		</div>
	}
	<!-- Order Form Section -->
	<div class="bg-gradient-to-br from-red-50 to-rose-50 py-10">
		<div class="container mx-auto px-4">
			<div class="max-w-4xl mx-auto">
				<div class="card bg-white shadow-2xl border-2 border-red-200">
					<div class="card-body">
						<form id="orderForm" class="space-y-6" action="/order" method="post">
							<!-- Hidden input to store the selected amount -->
							<input type="hidden" id="selectedAmount" name="amount" value="0" />
							<!-- Predefined Amounts -->
							<div>
								<h3 class="text-xl font-bold text-center mb-4 text-red-600">
									🎯 Popular Balloon Bundles
								</h3>
								<div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
									for _, pack := range packs {
										<button type="button" class="balloon-amount-btn btn btn-outline btn-primary btn-md p-8 flex flex-col items-center justify-center hover:scale-105 transform transition-all" data-amount={ fmt.Sprintf("%d", pack) }>
											<span class="text-lg">
												if pack <= 500 {
													🎈
												} else if pack <= 1000 {
													🎈🎈
												} else if pack <= 2000 {
													🎈🎈🎈
												} else {
													🎈🎈🎈🎈
												}
											</span>
											<div class="flex flex-row gap-2">
												<span class="font-bold">{ fmt.Sprintf("%d", pack) }</span>
												<span class="text-xs">
													if pack <= 500 {
														Party Pack
													} else if pack <= 1000 {
														Event Special
													} else if pack <= 2000 {
														Mega Bundle
													} else {
														Ultimate Pack
													}
												</span>
											</div>
										</button>
									}
								</div>
							</div>
							<!-- Custom Amount -->
							<div class="divider text-gray-500">OR</div>
							<div>
								<h3 class="text-xl font-bold text-center mb-4 text-red-600">
									✏️ Custom Balloon Count
								</h3>
								<div class="form-control">
									<label class="label">
										<span class="label-text text-base font-medium">How many red balloons do you need?</span>
									</label>
									<div class="input-group justify-center text-center p-3">
										<input type="number" id="customAmount" placeholder="Enter amount..." class="input input-bordered input-lg w-full max-w-xs text-center text-xl font-bold" min="1" max={ fmt.Sprintf("%d", maxCount) }/>
									</div>
									<label class="label">
										<span class="label-text-alt text-gray-500">Minimum: 1 balloon | Maximum: 1,000,000 balloons</span>
									</label>
								</div>
							</div>
							<!-- Submit Button -->
							<div class="text-center">
								<button type="submit" id="submitOrder" class="btn btn-primary btn-lg text-white shadow-lg hover:shadow-xl transform hover:scale-105 transition-all disabled:opacity-50" disabled>
									<span class="text-xl mr-2">🛒</span>
									Order My Red Balloons!
									<span class="text-xl ml-2 animate-bounce">🎈</span>
								</button>
								<p class="text-sm text-gray-500 mt-3">
									* All balloons are guaranteed to be red and balloon-shaped
								</p>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- Recent Orders Section -->
	<div class="bg-white py-16">
		<div class="container mx-auto px-4">
			<div class="flex items-center justify-center mb-12">
				<div class="text-4xl mr-4">📋</div>
				<h2 class="text-4xl font-bold text-gray-800">Your Recent Balloon Adventures</h2>
				<div class="text-4xl ml-4 animate-pulse">🎈</div>
			</div>
			<!-- Recent Orders -->
			<div class="max-w-6xl mx-auto space-y-4 mb-12">
				for _, order := range orders {
					<div class="alert bg-white shadow-lg border-2 border-gray-200">
						<div class="flex-1">
							<div class="flex items-center justify-between">
								<div class="flex items-center">
									<span class="text-2xl mr-3">📋</span>
									<div>
										<div class="font-bold">Order - { fmt.Sprintf("%d",order.RequestedItemCount) } Red Balloons</div>
										<div class="text-sm opacity-75">
											Requested: { fmt.Sprintf("%d", order.RequestedItemCount) } | 
											Shipped: { fmt.Sprintf("%d", order.ShippedItemCount) } | 
											Status: { string(order.Status) }
											if order.Status == models.OrderStatusShipped {
												🚚
											} else if order.Status == models.OrderStatusPacked {
												📦
											} else if order.Status == models.OrderStatusPending {
												🔄
											} else {
												✨
											}
											| Created At: { order.CreatedAt.Format("2006-01-02 15:04:05") }
										</div>
										<div>Order contents:</div>
										for pack, count := range order.Packs {
											<div>{ fmt.Sprintf("📦 %d", pack) } x { fmt.Sprintf("%d", count) }</div>
										}
									</div>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
	<script>
        // Interactive order form functionality
        document.addEventListener('DOMContentLoaded', function() {
            const amountButtons = document.querySelectorAll('.balloon-amount-btn');
            const customAmountInput = document.getElementById('customAmount');
            const submitButton = document.getElementById('submitOrder');
            let selectedAmount = 0;

            function updateOrderForm(amount) {
                selectedAmount = amount;
                document.getElementById('selectedAmount').value = amount;
                if (amount > 0) {
                    submitButton.disabled = false;
                    submitButton.classList.add('animate-pulse');
                } else {
                    submitButton.disabled = true;
                    submitButton.classList.remove('animate-pulse');
                }
            }

            // Handle predefined amount buttons
            amountButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const amount = parseInt(this.dataset.amount);
                    
                    // Reset all buttons
                    amountButtons.forEach(btn => {
                        btn.classList.remove('btn-primary');
                        btn.classList.add('btn-outline');
                    });
                    
                    // Activate clicked button
                    this.classList.add('btn-primary');
                    this.classList.remove('btn-outline');
                    
                    // Clear custom input
                    customAmountInput.value = '';
                    
                    updateOrderForm(amount);
                });
            });

            // Handle custom amount input
            customAmountInput.addEventListener('input', function() {
                const amount = parseInt(this.value) || 0;
                
                // Reset predefined buttons
                amountButtons.forEach(btn => {
                    btn.classList.remove('btn-primary');
                    btn.classList.add('btn-outline');
                });
                
                updateOrderForm(amount);
            });

            // Handle form submission
            document.getElementById('orderForm').addEventListener('submit', function(e) {
                if (selectedAmount <= 0) {
                    e.preventDefault();
                    alert('Please select an amount of balloons first!');
                    return;
                }
                // Let the form submit naturally to the server
            });
        });
    </script>
}
